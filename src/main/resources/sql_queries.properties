usr.select-all=SELECT ID, EMAIL, PASSWORD, FIRST_NAME, LAST_NAME, TOKEN, CREATED, MANAGER_ID, IMAGE_URL, IS_ACTIVE FROM USR
usr.select-by-id=SELECT ID, EMAIL, PASSWORD, FIRST_NAME, LAST_NAME, TOKEN, CREATED, MANAGER_ID, IMAGE_URL, IS_ACTIVE FROM USR WHERE ID = ?
usr.select-by-email=SELECT ID, EMAIL, PASSWORD, FIRST_NAME, LAST_NAME, TOKEN, CREATED, MANAGER_ID, IMAGE_URL, IS_ACTIVE FROM USR WHERE EMAIL = ?
usr.select-by-token=SELECT ID, EMAIL, PASSWORD, FIRST_NAME, LAST_NAME, TOKEN, CREATED, MANAGER_ID, IMAGE_URL, IS_ACTIVE FROM USR WHERE TOKEN = ?
usr.delete=delete FROM USR WHERE ID = ?
usr.insert=insert INTO USR(EMAIL, PASSWORD, FIRST_NAME, LAST_NAME, TOKEN, CREATED, MANAGER_ID, IS_ACTIVE) VALUES ( ?, ?, ?, ?, ?, ?, ?, ?) RETURNING ID
urs.insert-user-role=insert into assigned_role(user_id, role_id) values (?, (select r.id from role_r r where r.name = ?))
usr.insert-user-by-admin=insert into usr(email, token, first_name, last_name, password) values (?, ?, ?, ?, ?)
usr.update=update USR SET EMAIL = ?, PASSWORD = ?, FIRST_NAME = ?, LAST_NAME = ?, TOKEN = ?, CREATED = ?, MANAGER_ID = ?, IS_ACTIVE = ? WHERE ID = ?
usr.select-all-trainers=select usr.id, usr.email, usr.IMAGE_URL,usr.password, usr.first_name, usr.last_Name, usr.token, usr.created, usr.image_url, \
  usr.manager_id, usr.is_active, usr.is_on_landing_page, usr.description from usr \
  join assigned_role ar on usr.id = ar.user_id \
  join role_r rr on ar.role_id = rr.id \
  where rr.name = 'TRAINER'
usr.select-trainer-by-feedback=select usr.id, usr.email, usr.IMAGE_URL,usr.password, usr.first_name, usr.last_Name, usr.token, usr.created, usr.image_url, \
  usr.manager_id, usr.is_active, usr.is_on_landing_page, usr.description from usr \
  join feedback f on f.trainer_id = usr.id \
  where f.id = ?
usr.select-all-managers=select usr.id, usr.email, usr.IMAGE_URL,usr.password, usr.first_name, usr.last_Name, usr.token, usr.created, usr.image_url, \
  usr.manager_id, usr.is_active, usr.is_on_landing_page, usr.description from usr \
  join assigned_role ar on usr.id = ar.user_id \
  join role_r rr on ar.role_id = rr.id \
  where rr.name = 'MANAGER'
usr.select-subordinates-by-manager=SELECT ID, EMAIL, '' as PASSWORD, FIRST_NAME, LAST_NAME, TOKEN, CREATED, MANAGER_ID, IMAGE_URL, IS_ACTIVE FROM USR where manager_id = ?
usr.select-all-trainers-by-id=select distinct t.id, t.email, t.IMAGE_URL, t.password, t.first_name, \
  t.last_name, t.token, t.created, \
  t.manager_id, t.image_url, t.is_active, t.is_on_landing_page, t.description \
  from usr t \
  join course c on c.user_id = t.id \
  join usr_group ug on ug.course_id = c.id \
  join usr u on u.id = ug.user_id \
  join assigned_role ar on ar.user_id = t.id \
  join role_r r on r.id = ar.role_id \
  where r.name = 'TRAINER' and u.id = ?
usr.update-usr-by-admin=update usr set first_name = ?, last_name = ?, manager_id = ? where id = ?
usr.update-change-active=update usr set is_active = ? where id = ?
usr.update-image=update usr set image_url = ? where id = ?
usr.update-password=update usr set password = ? where id = ?
usr.select-manager-by-id=select m.id, m.email, m.IMAGE_URL, m.password, m.first_name, \
  m.last_name, m.token, m.created, \
  m.manager_id, m.image_url, m.is_active, m.is_on_landing_page, m.description \
  from usr m \
  join usr emp on emp.manager_id = m.id \
  where emp.id = ?
usr.select-ungrouped-by-course-id=select id, email, IMAGE_URL, password, first_name, last_Name, token, created, manager_id, \
  is_active, is_on_landing_page, description from usr where id in \
  (select distinct user_id from usr_group where (group_id is null or group_id = 0) and course_id = ? )
usr.select-by-group-id=SELECT usr.id, usr.email, usr.IMAGE_URL, usr.password, usr.first_name, usr.last_Name, usr.token, usr.created, usr.image_url,\
    usr.manager_id, usr.is_active, usr.is_on_landing_page, usr.description \
    from usr JOIN usr_group ug ON usr.id = ug.user_id WHERE group_id = ?
usr.select-on-landing-page=SELECT ID, EMAIL, PASSWORD, FIRST_NAME, LAST_NAME, '' as TOKEN, CREATED, MANAGER_ID, IMAGE_URL, IS_ACTIVE  FROM USR WHERE IS_ON_LANDING_PAGE = true
usr.update-landing-page=update usr set is_on_landing_page = ? where id = ?
usr.select-all-by-course=select distinct usr.* from usr join desirable_schedule ug on usr.id = ug.user_id  where course_id = ?
usr.select-trainer-by-group-id=SELECT usr.id, usr.email, usr.IMAGE_URL, usr.password, usr.first_name, usr.last_Name, usr.token, usr.created, usr.image_url,\
usr.manager_id, usr.is_active, usr.is_on_landing_page, usr.description \
FROM ((usr INNER JOIN course ON usr.id = course.user_id) INNER JOIN grup ON course.id = grup.course_id) WHERE grup.id = ?
usr.select-students-by-lesson-id=SELECT usr.id, EMAIL, PASSWORD, FIRST_NAME, LAST_NAME, TOKEN, CREATED, MANAGER_ID, IMAGE_URL, IS_ACTIVE FROM usr \
JOIN usr_group on usr_group.user_id = usr.id \
JOIN grup on usr_group.group_id = grup.id \
JOIN lesson on grup.id=lesson.group_id \
WHERE lesson.id = ?
usr.select-students-absent-on-lesson-with-no-reason=\
SELECT distinct U.ID, EMAIL, PASSWORD, FIRST_NAME, LAST_NAME, MANAGER_ID, IMAGE_URL, IS_ACTIVE \
FROM \
((((USR u inner join usr_group ug on u.id = ug.user_id) \
    inner join grup g on ug.group_id = g.id) \
        inner join lesson l on l.group_id = g.id) \
            inner join attendance a on a.user_id = u.id) \
WHERE status_id = (select id from attendance_status where title = 'absent') \
        and a.reason_id = (select id from absence_reason where title = 'No reason') \
        and l.id = ?
usr.select-admin=SELECT ID, EMAIL, PASSWORD, FIRST_NAME, LAST_NAME, MANAGER_ID, IMAGE_URL, IS_ACTIVE \
FROM USR u join assigned_role ar on u.id = ar.user_id \
where ar.role_id = \
(select id from role_r r where r.name = 'ADMIN');
course.select-all=SELECT ID, NAME, LEVEL, course_status_id, USER_ID, IMAGE_URL, start_date, end_date, is_on_landing_page, description FROM course
course.select-by-id=SELECT ID, NAME, LEVEL, course_status_id, USER_ID, IMAGE_URL, start_date, end_date, is_on_landing_page, description FROM course where id = ?
course.delete=delete from course where id = ?
course.insert=insert into course (name, level, course_status_id, user_id, IMAGE_URL, start_date, end_date, is_on_landing_page, description) values(?, ?, ?, ?, ?, ?, ?, ?, ?) RETURNING ID
course.update=update course set NAME = ?, LEVEL = ?, course_status_id = ?, USER_ID = ?, IMAGE_URL = ?, start_date = ?, end_date = ?, is_on_landing_page = ?, description = ?   where id = ?
course.select-on-landing-page=SELECT ID, NAME, LEVEL, course_status_id, USER_ID, IMAGE_URL, start_date, end_date, is_on_landing_page, description FROM course WHERE is_on_landing_page = true
course.update-landing-page=update course set is_on_landing_page = ? where id = ?
role.select-by-user-id=SELECT role_r.name as role FROM role_r JOIN assigned_role ar on role_r.id = ar.role_id WHERE AR.user_id = ?
role.select-by-name=select id, name from role_r where name = ?
course.select-by-level=select id, name, level, course_status_id, user_id, image_url, start_date, end_date, is_on_landing_page, description from course where level = ?
course.select-by-trainer=select id, name, level, course_status_id, user_id, image_url, start_date, end_date, is_on_landing_page, description from course where user_id = ?
course.select-trainer=select usr.id, usr.email, usr.IMAGE_URL,usr.password, usr.first_name, usr.last_Name, usr.token, usr.created, usr.image_url, \
  usr.manager_id, usr.is_active, usr.is_on_landing_page, usr.description from usr \
  join assigned_role ar on usr.id = ar.user_id \
  join role_r rr on ar.role_id = rr.id \
  join course c on c.user_id = usr.id \
  where rr.name = 'TRAINER' and c.id = ?
course.select-course-by-group=SELECT course.* from course JOIN grup g ON course.id = g.course_id WHERE g.id = ?
course.select-course-by-feedback=select c.id, c.name, c.LEVEL, c.course_status_id, c.user_id, c.image_url, c.start_date, c.end_date, c.is_on_landing_page, c.description \
  from course c \
  join feedback f on f.course_id = c.id \
  where f.id = ?
course.select-course-by-trainer-and-by-employee=select c.id, c.name, c.level, c.course_status_id, c.user_id, c.image_url, \
  c.start_date, c.end_date, c.is_on_landing_page, c.description \
  from course c \
  join grup g on g.course_id = c.id \
  join usr_group ug on ug.group_id = g.id \
  join usr u on u.id = ug.user_id \
  where c.user_id = ? and u.id = ?
course.edit=update course set NAME = ?, LEVEL = ?, course_status_id = ?, start_date = ?, end_date = ?, is_on_landing_page = ?, description = ?   where id = ?
group.select-all=SELECT ID, COURSE_ID, TITLE FROM GRUP
group.select-by-id=SELECT ID, COURSE_ID, TITLE FROM GRUP WHERE ID = ?
group.delete=DELETE FROM GRUP WHERE ID = ?
group.update=UPDATE GRUP SET COURSE_ID= ? , TITLE= ? WHERE ID = ?
group.insert=INSERT INTO GRUP (COURSE_ID, TITLE) VALUES (?, ?) RETURNING ID
group.select-number-of-employees=select count(*) from usr_group where group_id = ?
group.select-by-course=SELECT ID, COURSE_ID, TITLE FROM GRUP WHERE COURSE_ID = ? order by id
group.select-by-employee=select distinct g.id, g.course_id, g.title \
  from grup g \
  join usr_group ug on ug.group_id = g.id \
  where ug.user_id = ?
group.select-by-trainer-id=SELECT grup.id, grup.course_id, grup.title from grup JOIN course c ON grup.course_id = c.id JOIN usr u ON c.user_id = u.id WHERE user_id = ?
group.delete-student=update usr_group set group_id = null WHERE user_id = ? AND group_id = ?
group.select-by-user-id-and-group-id=select g.id, g.course_id, g.title from usr_group \
join grup g on usr_group.group_id = g.id \
where user_id = ? and group_id = ?
usr_group.delete-all-for-user=delete from usr_group where user_id = ?
usr_group.delete-all-for-group=update usr_group set group_id = null WHERE group_id = ?
usr_group.select-by-usr-and-course=select usr_group.id,  usr_group.user_id, usr_group.group_id, usr_group.is_attending , usr_group.course_id   \
  from usr_group where course_id = ? and user_id = ?
usr_group.select-by-group=select usr_group.id,  usr_group.user_id, usr_group.group_id, usr_group.is_attending , usr_group.course_id from usr_group where group_id = ?
usr_group.select-by-user-id=select usr_group.id,  usr_group.user_id, usr_group.group_id, usr_group.is_attending , usr_group.course_id from usr_group where usr_group.user_id = ?
usr_group.select-by-id=select usr_group.id,  usr_group.user_id, usr_group.group_id, usr_group.is_attending , usr_group.course_id from usr_group where id = ?
usr_group.select-by-usr-and-group=select usr_group.id,  usr_group.user_id, usr_group.group_id, usr_group.is_attending , usr_group.course_id  from usr_group where group_id = ? and user_id = ?
usr_group.insert=insert into usr_group(user_id, group_id, is_attending, course_id) values (?, ?, ?, ?) returning id
usr_group.insert-without-group=insert into usr_group(user_id, is_attending, course_id) values (?, ?, ?) returning id
usr_group.update=update usr_group set group_id = ?, is_attending = ? where id = ?
#
level.select-all=select id, title from level
level.select-by-id=select id, title from level where id = ?
level.delete=delete from level where id = ?
level.insert=insert into level(title) values (?) returning ID
level.update=update level set title=? where id = ?
level.select-by-trainer=select distinct level.id, level.title from level join course c on level.id = c.level where user_id = ?
level.select-by-name=select id, title from level where title = ?
lesson.select-all=SELECT id, group_id, topic, trainer_id, time_date, TO_CHAR(duration,'HH24:MI') as duration, is_canceled, is_archived, performed FROM lesson
lesson.select-by-id=SELECT id, group_id, topic, trainer_id, time_date,  TO_CHAR(duration,'HH24:MI') as duration, is_canceled, is_archived, performed FROM lesson WHERE id = ?
lesson.insert=INSERT INTO lesson(group_id, topic, trainer_id, time_date, duration, is_canceled, is_archived, performed) VALUES ( ?, ?, ?, ?, CAST(? AS interval), ?, ?, ?) RETURNING ID
lesson.update=UPDATE lesson SET group_id = ?, topic = ?, trainer_id = ?, time_date = ?, duration = CAST(? AS interval), is_canceled = ?, is_archived = ?, performed = ?  WHERE id = ?
lesson.delete=DELETE FROM lesson WHERE id = ?
#lesson.archive=UPDATE lesson SET is_archived = true  WHERE id = ?
lesson.select-by-group-id=SELECT id, group_id, topic, trainer_id, time_date, TO_CHAR(duration,'HH24:MI') as duration, \
  is_canceled, is_archived,  performed \
  FROM lesson \
  where group_id = ? and (is_archived = false or is_archived is null) order by time_date
lesson.select-by-employee-id=SELECT id, group_id, topic, trainer_id, time_date, TO_CHAR(duration, 'HH24:MI') as duration, is_canceled, is_archived,  performed \
  FROM lesson \
  where group_id in (select group_id from usr_group where user_id = ?) \
  and is_archived = false \
  order by time_date
lesson.select-by-trainer-id=SELECT id, group_id, topic, trainer_id, time_date, TO_CHAR(duration, 'HH24:MI') as duration, \
  is_canceled, is_archived, performed \
  FROM lesson \
  where trainer_id = ?
lesson.select-by-group-id-and-user-id=SELECT lesson_id as id, group_id, topic, trainer_id, time_date, ar.title as absence_reason, \
  astat.title as absence_status, is_archived, is_canceled, duration, performed FROM lesson \
JOIN grup g ON lesson.group_id = g.id \
JOIN attendance a ON lesson.id = a.lesson_id \
LEFT JOIN absence_reason ar ON ar.id = a.reason_id \
JOIN attendance_status astat ON a.status_id = astat.id \
WHERE group_id = ? AND user_id = ?
lesson.select-lesson-trainer=SELECT u.ID, EMAIL, PASSWORD, FIRST_NAME, LAST_NAME, MANAGER_ID, IMAGE_URL, IS_ACTIVE \
FROM USR u join lesson l on u.id = l.trainer_id \
where l.id = ?;
attendance.select-by-student-id-and-course-id=select attendance.id, u.id as student_id, u.first_name, u.last_name, course_id, c.name course_name, l.id as lesson_id, l.time_date, l.topic, atts.title as status, ar.title as reason from attendance \
join lesson l on attendance.lesson_id = l.id \
join grup g on l.group_id = g.id \
join course c on g.course_id = c.id \
join usr u on attendance.user_id = u.id \
join attendance_status atts on attendance.status_id = atts.id \
left join absence_reason ar on attendance.reason_id = ar.id \
where attendance.user_id = ? and course_id = ?
attendance.select-by-student-id-and-group-id=select attendance.id, u.id as student_id, u.first_name, u.last_name, course_id, c.name course_name, l.id as lesson_id, l.time_date, l.topic, atts.title as status, ar.title as reason from attendance \
join lesson l on attendance.lesson_id = l.id \
join grup g on l.group_id = g.id \
join course c on g.course_id = c.id \
join usr u on attendance.user_id = u.id \
join attendance_status atts on attendance.status_id = atts.id \
left join absence_reason ar on attendance.reason_id = ar.id \
where attendance.user_id = ? and g.id = ?
attendance.select-by-lesson-id=select attendance.id, usr.id as student_id, usr.first_name, usr.last_name, course_id, c.name course_name, l.id as lesson_id, l.time_date, l.topic, atts.title as status, ar.title as reason from attendance \
join lesson l on attendance.lesson_id = l.id \
join grup g on l.group_id = g.id \
join course c on g.course_id = c.id \
join usr on attendance.user_id = usr.id \
join attendance_status atts on attendance.status_id = atts.id \
left join absence_reason ar on attendance.reason_id = ar.id \
where l.id = ?
attendance.select-by-group-id=select attendance.id, u.id as student_id, u.first_name, u.last_name, course_id, c.name course_name, l.id as lesson_id, l.time_date, l.topic, atts.title as status, ar.title as reason from attendance \
    join lesson l on attendance.lesson_id = l.id \
    join grup g on l.group_id = g.id \
    join course c on g.course_id = c.id \
    join usr u on attendance.user_id = u.id \
    join attendance_status atts on attendance.status_id = atts.id \
    left join absence_reason ar on attendance.reason_id = ar.id \
where g.id = ?
attendance.insert=insert into attendance(lesson_id, user_id, status_id) values (?, ?, 1)
attendance.update=update attendance set status_id = ?, reason_id = ? where id = ?
absence_reason.select-all=SELECT ID, TITLE FROM ABSENCE_REASON
absence_reason.select-by-id=SELECT ID, TITLE FROM ABSENCE_REASON WHERE ID = ?
absence_reason.delete=delete from ABSENCE_REASON WHERE ID = ?
absence_reason.insert=insert into ABSENCE_REASON(TITLE) VALUES (?) RETURNING ID
absence_reason.update=update ABSENCE_REASON SET TITLE = ? WHERE ID = ?
attendance_status.select-all=SELECT ID, TITLE FROM ATTENDANCE_STATUS
status.select-name-by-id=SELECT NAME, DESCRIPTION FROM COURSE_STATUS WHERE ID= ?
status.select-id-by-name=SELECT ID, DESCRIPTION FROM COURSE_STATUS WHERE NAME= ?
desirable.schedule.select-all=select desirable_schedule.id, user_id, course_id, cron_interval, suitability \
  from desirable_schedule \
  join usr_group on user_group_id = usr_group.id
desirable.schedule.select-by-course-id=select desirable_schedule.id, user_id, course_id, cron_interval, suitability \
  from desirable_schedule \
  join usr_group on user_group_id = usr_group.id where course_id = ?
desirable.schedule.select-by-group-id=select desirable_schedule.id, user_id, course_id, cron_interval, suitability \
  from desirable_schedule \
  join usr_group on user_group_id = usr_group.id where group_id = ?
desirable.schedule.select-ungrouped-by-course-id=select desirable_schedule.id, user_id, course_id, cron_interval, suitability \
  from desirable_schedule \
  join usr_group on user_group_id = usr_group.id \
  where (group_id is null or group_id = 0) \
  and course_id = ?
desirable.schedule.select-by-usr-group-id=select desirable_schedule.id, user_id, course_id, cron_interval, suitability \
  from desirable_schedule join usr_group on user_group_id = usr_group.id where user_group_id = ?
desirable.schedule.insert=insert into desirable_schedule \
  (user_group_id, cron_interval, suitability ) \
  values ((select id from usr_group where user_id = ? and course_id = ?), ?, ?) returning id
suitability.select-all=select id, title, priority, color from suitability
attachment.select-all=SELECT ID, URL, NAME, TRAINER_ID, DESCRIPTION FROM ATTACHMENT
attachment.select-by-id=SELECT ID, URL, NAME, TRAINER_ID, DESCRIPTION FROM ATTACHMENT WHERE ID = ?
attachment.delete=DELETE FROM ATTACHMENT WHERE ID = ?
attachment.insert=INSERT INTO ATTACHMENT(URL, NAME, TRAINER_ID, DESCRIPTION) VALUES(?, ?, ?, ?) RETURNING ID
attachment.select-by-lesson-id=SELECT ID, URL, NAME, TRAINER_ID, DESCRIPTION FROM ATTACHMENT JOIN LESSON_ATTACHMENT L ON ATTACHMENT.ID = L.ATTACHMENT_ID WHERE L.LESSON_ID = ?
attachment.select-by-name=SELECT ID, URL, NAME, TRAINER_ID, DESCRIPTION FROM ATTACHMENT WHERE NAME = ?
attachment.select-by-trainer-id=SELECT ID, URL, NAME, TRAINER_ID, DESCRIPTION FROM ATTACHMENT WHERE TRAINER_ID = ?
lesson_attachment.delete-by-attachment-id=DELETE FROM LESSON_ATTACHMENT WHERE ATTACHMENT_ID = ?
lesson_attachment.insert=INSERT INTO LESSON_ATTACHMENT(ATTACHMENT_ID, LESSON_ID) VALUES(?, ?)
lesson_attachment.update=UPDATE LESSON_ATTACHMENT SET ATTACHMENT_ID = ?, LESSON_ID = ? WHERE ID = ?
lesson_attachment.select-all-by-lesson-id=SELECT ID, ATTACHMENT_ID, LESSON_ID FROM LESSON_ATTACHMENT WHERE LESSON_ID = ?
lesson_attachment.delete=DELETE FROM LESSON_ATTACHMENT WHERE ID = ?
lesson_attachment.unlink=DELETE FROM LESSON_ATTACHMENT WHERE ATTACHMENT_ID = ? AND LESSON_ID = ?
lesson_attachment.delete-all-by-lesson-id=DELETE FROM LESSON_ATTACHMENT WHERE LESSON_ID = ?
feedback.select-all=select id, user_id, trainer_id, course_id, text, date_time from feedback
feedback.select-by-id=select id, user_id, trainer_id, course_id, text, date_time from feedback where id = ?
feedback.delete=delete from feedback where id = ?
feedback.insert=insert into feedback (user_id, trainer_id, course_id, text, date_time) values (?, ?, ?, ?, ?) returning id
feedback.update=update feedback set user_id = ?, trainer_id = ?, course_id = ?, text = ?, date_time = ? where id = ?
feedback.select-all-by-user-id=select id, user_id, trainer_id, course_id, text, date_time from feedback where user_id = ? order by date_time desc
feedback.select-all-by-trainer-id-and-user-id=select id, user_id, trainer_id, course_id, text, date_time from feedback where user_id = ? and trainer_id = ? order by date_time desc
chat.select-chat-by-sender-id-and-receiver-id=select c.id, c.name, c.time_date, c.group_id from chat_user \
join chat c on chat_user.chat_id = c.id \
where group_id isnull and user_id = ? and chat_id = (select chat_id from chat_user where user_id = ?)
message.insert=insert into chat_message(chat_id, user_id, time_date, text) values (?, ?, ?, ?) RETURNING ID
message.select-by-chat-id=select chat_message.id, chat_id, user_id, u.first_name, u.last_name, time_date, text from chat_message \
join usr u on chat_message.user_id = u.id \
where chat_id = ?
message.select-by-id=select chat_message.id, chat_id, user_id, u.first_name, u.last_name, time_date, text from chat_message \
join usr u on chat_message.user_id = u.id \
where chat_message.id = ?
message.select-by-chat-id-pageable=select chat_message.id, chat_id, user_id, u.first_name, u.last_name, time_date, text from chat_message \
join usr u on chat_message.user_id = u.id \
where chat_id = ? order by time_date desc limit ? offset ?
chat.insert=insert into chat(name, time_date, group_id) values (?, ?, ?) RETURNING ID
chat.insert-user=insert into chat_user(chat_id, user_id) values (?, ?)
chat.select-by-user-id=select id, name, time_date, group_id from chat \
join chat_user cu on chat.id = cu.chat_id \
where cu.user_id = ?
chat.select-by-group-id=select * from chat where group_id = ?
chat.select-by-user-id-and-chat-id=select c.id, c.name, c.time_date, c.group_id from chat_user \
join chat c on chat_user.chat_id = c.id \
where user_id = ? and chat_id = ?

#problem.select-requests-of-type=select id, user_id, title, problem_status_id, description\
#                                from problem\
#                                where problem_status_id = (select id from problem_status\
#                                                           where title = ?)
problem.insert=insert into problem (user_id, title, problem_status_id, description)\
                        values (?, ?, ?, ?) returning id

problem.select-all-requests=select id, user_id, title, problem_status_id, description, chat_id from problem
problem.update-request=\
    update problem\
    set user_id = ?, title = ?, problem_status_id = ?, description = ?\
    where id = ?;

problem.select-all-by-user=select id, user_id, title, problem_status_id, description, chat_id from problem where user_id = ?;

problem-status.select-all=select id, title, description from problem_status;
